{"version":3,"sources":["bell.mp3","App.js","serviceWorker.js","index.js"],"names":["module","exports","Timer","props","className","style","backgroundColor","sessionType","id","min","sec","onClick","handleStart","handlePause","BreakSetter","breakLength","decrementBreak","incrementBreak","SessionSetter","mins","countDown","decrement","increment","App","useState","setSessionType","setMin","setSec","setBreakLength","setCountDown","sessionLength","setSessionLength","breakCount","setBreakCount","bell","UIfx","bellAudio","useEffect","play","interval","setInterval","clearInterval","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.beec860b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bell.f3e1419d.mp3\";","import React, { useState, useEffect } from \"react\";\nimport UIfx from \"uifx\";\nimport bellAudio from \"./bell.mp3\";\nimport \"./App.css\";\n\nfunction App() {\n  const [sessionType, setSessionType] = useState(\"WORK!\"); //state changes to \"BREAK\" when timer reaches zero.\n  const [min, setMin] = useState(25);\n  const [sec, setSec] = useState(0);\n  const [breakLength, setBreakLength] = useState(5);\n  const [countDown, setCountDown] = useState(false);\n  const [sessionLength, setSessionLength] = useState(25);\n  const [breakCount, setBreakCount] = useState(false);\n\n  const bell = new UIfx(bellAudio);\n\n  const increment = () => {\n    if (sessionType === \"WORK!\") {\n      setMin(sessionLength);\n      setSec(0);\n      if (sessionLength === min) {\n        setSessionLength(sessionLength + 1);\n        setMin(min + 1);\n      }\n    } else {\n      setSessionLength(sessionLength + 1);\n    }\n  };\n  const decrement = () => {\n    if (sessionType === \"WORK!\") {\n      setMin(sessionLength);\n      setSec(0);\n      if (sessionLength === min) {\n        setSessionLength(sessionLength - 1);\n        setMin(min - 1);\n      }\n    } else {\n      setSessionLength(sessionLength - 1);\n    }\n  };\n\n  const incrementBreak = () => {\n    if (sessionType === \"BREAK!\") {\n      setMin(breakLength);\n      setSec(0);\n      if (breakLength === min) {\n        setBreakLength(breakLength + 1);\n        setMin(min + 1);\n      }\n    } else {\n      setBreakLength(breakLength + 1);\n    }\n  };\n\n  const decrementBreak = () => {\n    if (sessionType === \"BREAK!\") {\n      setMin(breakLength);\n      setSec(0);\n      if (breakLength === min) {\n        setBreakLength(breakLength - 1);\n        setMin(min - 1);\n      }\n    } else {\n      setBreakLength(breakLength - 1);\n    }\n  };\n\n  useEffect(() => {\n    if (countDown || breakCount) {\n      if (breakCount) {\n        setSessionType(\"BREAK!\");\n      }\n      if (countDown) {\n        setSessionType(\"WORK!\");\n      }\n      if (sec === -1 && min > 0) {\n        setMin(min - 1);\n        setSec(59);\n      }\n      if (countDown && sec === -1 && min === 0) {\n        bell.play();\n        setCountDown(false);\n        setBreakCount(true);\n        setMin(breakLength);\n        setSec(0);\n      }\n      if (breakCount && sec === -1 && min === 0) {\n        bell.play();\n        setBreakCount(false);\n        setCountDown(true);\n        setMin(sessionLength);\n        setSec(0);\n      } else {\n        const interval = setInterval(() => {\n          setSec(sec - 1);\n        }, 1000);\n        return () => clearInterval(interval);\n      }\n    }\n  }, [min, sec, countDown, breakCount, sessionLength, breakLength, bell]);\n\n  function handleStart() {\n    sessionType === \"WORK!\" ? setCountDown(true) : setBreakCount(true);\n  }\n  function handlePause() {\n    sessionType === \"WORK!\" ? setCountDown(false) : setBreakCount(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <header>POMODORO CLOCK</header>\n      <Timer\n        handlePause={handlePause}\n        sessionType={sessionType}\n        handleStart={handleStart}\n        min={min}\n        sec={sec}\n      />{\" \"}\n      <button\n        id=\"reset\"\n        onClick={() => {\n          setSessionType(\"WORK!\");\n          setCountDown(false);\n          setBreakCount(false);\n          setMin(25);\n          setSessionLength(25);\n          setBreakLength(5);\n          setSec(0);\n        }}\n      >\n        ⟲\n      </button>\n      <div className=\"timeSelector\">\n        <div id=\"break-label\">\n          BREAK LENGTH:\n          <BreakSetter\n            breakLength={breakLength}\n            incrementBreak={incrementBreak}\n            decrementBreak={decrementBreak}\n          />\n        </div>\n        <div id=\"session-label\">\n          SESSION LENGTH:{\" \"}\n          <SessionSetter\n            countDown={countDown}\n            mins={sessionLength}\n            increment={increment}\n            decrement={decrement}\n          />\n        </div>\n      </div>\n      <div className=\"author\">designed and coded by Maria Gusova</div>\n    </div>\n  );\n}\n\nfunction Timer(props) {\n  return (\n    <div\n      className=\"Timer\"\n      style={{\n        backgroundColor:\n          props.sessionType === \"WORK!\"\n            ? \"rgb(245, 115, 76)\"\n            : \"rgb(141, 182, 94)\",\n      }}\n    >\n      <p id=\"sessionType\">{props.sessionType}</p>\n      <h1>\n        {props.min < 10 ? `0${props.min}` : props.min}:\n        {props.sec < 10 ? `0${props.sec}` : props.sec}\n      </h1>\n      <div className=\"timerButtons\">\n        <button id=\"start\" onClick={props.handleStart}>\n          ▷\n        </button>\n        <button id=\"pause\" onClick={props.handlePause}>\n          | |\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction BreakSetter(props) {\n  return (\n    <div className=\"BreakSetter\">\n      <button\n        className=\"decrement\"\n        onClick={() => (props.breakLength > 1 ? props.decrementBreak() : null)}\n      >\n        -\n      </button>\n      {props.breakLength}\n      <button\n        className=\"increment\"\n        onClick={() => (props.breakLength < 60 ? props.incrementBreak() : null)}\n      >\n        +\n      </button>\n    </div>\n  );\n}\nfunction SessionSetter(props) {\n  return (\n    <div className=\"SessionSetter\">\n      <button\n        className=\"decrement\"\n        onClick={() =>\n          props.mins > 1 && props.countDown === false ? props.decrement() : null\n        }\n      >\n        -\n      </button>\n      {props.mins}\n      <button\n        className=\"increment\"\n        onClick={() =>\n          props.mins < 60 && props.countDown === false\n            ? props.increment()\n            : null\n        }\n      >\n        +\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}